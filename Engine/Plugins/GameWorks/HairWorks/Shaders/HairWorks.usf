#include "GeneratedUniformBuffers.usf" 
#include "ShaderVersion.usf"
#include "Common.usf"
#include "ReflectionEnvironmentShared.usf"
#include "BRDF.usf"
#include "SHCommon.usf"
struct FVertexFactoryInterpolantsVSToPS
{};
#include "ShadowDepthCommon.usf"

#define GFSDK_HAIR_DECLARE_VELOCITY_ATTR

#include "GFSDK_HairWorks_ShaderCommon.usf"


GFSDK_Hair_ConstantBuffer HairConstantBuffer;

SamplerState TextureSampler;

Texture2D RootColorTexture;
Texture2D TipColorTexture;
Texture2D SpecularColorTexture;

GFSDK_HAIR_DECLARE_SHADER_RESOURCES(t10, t11, t12, t13, t14);

struct MainOut
{
	float4 Color : SV_Target0;
};

MainOut Main(GFSDK_Hair_PixelShaderInput input)
{
	MainOut outPut = (MainOut)0;

	outPut.Color.rgb = 1;

	outPut.Color.a = 1;

	return outPut;
}

float4 SimpleMain() : SV_Target0
{
	return 1;
}

float4 VelocityMain(GFSDK_Hair_PixelShaderInput input) : SV_Target0
{
	// Shader attributes
	GFSDK_Hair_ShaderAttributes shaderAttributes = GFSDK_Hair_GetShaderAttributes(input, HairConstantBuffer);

	float4 outColor;

	float2 vel = shaderAttributes.wVel.xy;
	vel.y = -vel.y;
	vel = vel / (View.ViewSizeAndInvSize.xy / 2.0) - (View.ViewToClip[2].xy - View.PrevProjection[2].xy);

	outColor.xy = EncodeVelocityToTexture(vel);
	outColor.zw = float2(0, 0);
	return outColor;
}

float ShadowDepthMain(in float4 Position : SV_Position) : SV_Depth
{
	return Position.z * Position.w * ShadowParams.y + ShadowParams.x;
}